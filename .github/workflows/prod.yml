name: "SmallWindow21 Production Deploy"

on:
  push:
    branches: [ main ]

jobs:
  build-application:
    name: "Build Application"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 11
      # cache action
      - uses: actions/cache@v2
        id: mvncache
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
        if: steps.mvncache.outputs.cache-hit != 'true' 
      # ##      
      - run: mvn -Pprod,api-docs clean verify --file app/pom.xml
      - run: mkdir staging && cp app/target/smallwindow-21-0.0.1-SNAPSHOT.jar staging
      - uses: actions/upload-artifact@v2
        with:
          name: Package
          path: staging

  terraform-setup:
    name: "Perform Terraform Setup"
    runs-on: ubuntu-latest
    needs: build-application
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1


  terraform-apply:
    name: "Perform Terraform Apply"
    runs-on: ubuntu-latest
    needs: terraform-setup
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    environment:
      name: SmallWindow21
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Get Elastic Beanstalk Endpoint
        run: |
           elasticbeanstalk_app_cname=$(terraform output elasticbeanstalk_app_cname)
           echo $elasticbeanstalk_app_cname
  deploy:
    name: "Deploy to elastic beanstalk"
    runs-on: ubuntu-latest
    needs: terraform-apply
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: Package
          path: staging
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: smallwindow21
          environment_name: smallwindow21-dev
          version_label: ${{github.SHA}}
          region: eu-west-1
          deployment_package: staging/smallwindow-21-0.0.1-SNAPSHOT.jar

  terraform-destroy:
    name: "Perform Terraform Destroy"
    runs-on: ubuntu-latest
    needs: terraform-apply
    timeout-minutes: 1440
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    environment:
      name: SmallWindow21
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
